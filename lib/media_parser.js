// Generated by CoffeeScript 1.6.2
(function() {
  var MediaParser, e, e1;

  MediaParser = {
    services: [],
    init: function(http_service) {
      this.http_service = http_service || NodeHttpService;
      this.services.push(MediaServices.parseImgly);
      this.services.push(MediaServices.parseInstagram);
      this.services.push(MediaServices.parseFlickr);
      this.services.push(MediaServices.parseTwitpic);
      this.services.push(MediaServices.parseYfrog);
      this.services.push(MediaServices.parseDeviantArt);
      this.services.push(MediaServices.parseHulu);
      this.services.push(MediaServices.parseJustin);
      this.services.push(MediaServices.parseScreenr);
      this.services.push(MediaServices.parseRdio);
      this.services.push(MediaServices.parseSoundCloud);
      this.services.push(MediaServices.parseSpotify);
      this.services.push(MediaServices.parseTed);
      this.services.push(MediaServices.parseVimeo);
      this.services.push(MediaServices.parseYoutube);
      return this.services.push(MediaServices.parseSlideshare);
    },
    parse: function(cnt, callback) {
      var has_match, service, _i, _len, _ref;

      if (!MediaParser.http_service) {
        MediaParser.init();
      }
      _ref = MediaParser.services;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        service = _ref[_i];
        has_match = service(cnt, callback);
        if (has_match) {
          return true;
        }
      }
      return callback(null);
    }
  };

  try {
    exports.MediaParser = MediaParser;
  } catch (_error) {
    e = _error;
    window.MediaParser = MediaParser;
  }

  try {
    exports.parse = MediaParser.parse;
  } catch (_error) {
    e1 = _error;
    null;
  }

}).call(this);
