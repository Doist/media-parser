// Generated by CoffeeScript 1.7.1
var MediaParser, MediaParserUtils, MediaServices, MediaTypes, NodeHttpService, e, e1;

MediaParser = {
  services: [],
  init: function(http_service) {
    this.http_service = http_service || NodeHttpService;
    this.services.push(MediaServices.parseImgly);
    this.services.push(MediaServices.parseInstagram);
    this.services.push(MediaServices.parseFlickr);
    this.services.push(MediaServices.parseTwitpic);
    this.services.push(MediaServices.parseYfrog);
    this.services.push(MediaServices.parseDeviantArt);
    this.services.push(MediaServices.parseHulu);
    this.services.push(MediaServices.parseJustin);
    this.services.push(MediaServices.parseScreenr);
    this.services.push(MediaServices.parseRdio);
    this.services.push(MediaServices.parseSoundCloud);
    this.services.push(MediaServices.parseSpotify);
    this.services.push(MediaServices.parseTed);
    this.services.push(MediaServices.parseVimeo);
    this.services.push(MediaServices.parseYoutube);
    return this.services.push(MediaServices.parseSlideshare);
  },
  parse: function(cnt, callback, timeout) {
    var has_match, service, _i, _len, _ref;
    if (!MediaParser.http_service) {
      MediaParser.init();
    }
    _ref = MediaParser.services;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      service = _ref[_i];
      has_match = service(cnt, callback, timeout);
      if (has_match) {
        return true;
      }
    }
    return callback(null);
  },
  extractURLs: function(content) {
    var pattern;
    pattern = MediaServices.getProvidersPattern();
    return content.match(pattern) || [];
  }
};

MediaParserUtils = {
  format: function() {
    var i, reg, s, _i, _ref;
    s = arguments[0];
    for (i = _i = 0, _ref = arguments.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      reg = new RegExp("\\{" + i + "\\}", "gm");
      s = s.replace(reg, arguments[i + 1]);
    }
    return s;
  },
  getBestSize: function(sizes, size_width) {
    var key, pair, sizes_sorted, value, _i, _len;
    sizes_sorted = [];
    for (key in sizes) {
      value = sizes[key];
      sizes_sorted.push([key, value]);
    }
    sizes_sorted = sizes_sorted.sort(function(a, b) {
      return a[1] - b[1];
    });
    for (_i = 0, _len = sizes_sorted.length; _i < _len; _i++) {
      pair = sizes_sorted[_i];
      key = pair[0];
      value = pair[1];
      if (value >= size_width) {
        return key;
      }
    }
    return key;
  }
};

MediaServices = {
  providers: {
    'Imgly': /https?:\/\/(?:www\.)?img\.ly\/(\w+)\/?/i,
    'Instagram': /https?:\/\/(?:www\.)?(?:instagr\.am|instagram\.com)\/p\/([\w-]+)\/?/i,
    'Twitpic': /https?:\/\/(?:www\.)?twitpic\.com\/(\w+)\/?/i,
    'Yfrog': /https?:\/\/(?:www\.)?(?:\w+\.)?yfrog\.com\/(\w+)\/?/i,
    'Flickr': /https?:\/\/(?:www\.)?(?:flic\.kr\/p|flickr.com\/photos)\/[^\s]+\/?/i,
    'DevaiantArt': new RegExp("https?://(?:www\\.)?" + "(?:[\\w-]+\\.deviantart\\.com/(?:art/|[^/]+#/d)|fav\\.me/|sta\\.sh/)" + "[\\w-]+/?", 'i'),
    'Hulu': new RegExp("https?://(?:www\\.)?hulu\\.com/watch/[\\w\\-/]+", 'i'),
    'JustinTv': new RegExp("https?://(?:www\\.)?justin\\.tv/[\\w\\-]+/?", 'i'),
    'Screenr': new RegExp("https?://(?:www\\.)?screenr\\.com/\\w+/?", 'i'),
    'Rdio': new RegExp("https?://(?:www\\.)?rdio\\.com/artist/[\\w\\-/]+", 'i'),
    'Soundcloud': new RegExp("https?://(?:www\\.)?soundcloud\\.com/[\\w\\-/]+", 'i'),
    'Spotify': new RegExp("https?://(?:www|open|play)\\.?spotify\\.com/(?:artist|track)/[\\w\\-/]+", 'i'),
    'Ted': new RegExp("https?://(?:www\\.)?ted\\.com/talks/[\\w]+", 'i'),
    'Vimeo': new RegExp("https?://(?:www\\.)?vimeo\\.com/(?:album/\\w+/video/|groups/\\w+/videos/)?\\w+/?", 'i'),
    'Slideshare': new RegExp("https?://(?:www\\.)?slideshare\\.net/[\\w\\-]+/[\\w\\-]+", 'i'),
    'Youtube': new RegExp("https?://(?:www\\.)?(?:youtube\\.com/watch\\?v=|youtu\\.be/)[\\w-]+/?", 'i')
  },
  providers_cached: null,
  providers_cached_reg_exp: null,
  getProviders: function() {
    var key, providers, reg_exp, reg_exps;
    if (!MediaServices.providers_cached) {
      providers = MediaServices.providers;
      reg_exps = [];
      for (key in providers) {
        reg_exp = providers[key];
        reg_exps.push('(?:' + reg_exp.source.replace(/\\/g, '\\\\') + ')');
      }
      MediaServices.providers_cached = {
        'pattern': reg_exps.join('|'),
        'providers': providers
      };
    }
    return MediaServices.providers_cached;
  },
  getProvidersPattern: function() {
    var key, reg_exp, reg_exps, _ref;
    if (!MediaServices.providers_cached_reg_exp) {
      reg_exps = [];
      _ref = MediaServices.providers;
      for (key in _ref) {
        reg_exp = _ref[key];
        reg_exps.push('(?:' + reg_exp.source + ')');
      }
      MediaServices.providers_cached_reg_exp = new RegExp(reg_exps.join('|'), 'ig');
    }
    return MediaServices.providers_cached_reg_exp;
  },
  parseImgly: function(cnt, callback) {
    var match;
    match = cnt.match(MediaServices.providers.Imgly);
    if (match) {
      MediaTypes.imageEntity(callback, {
        'sizes': {
          'thumb': 50,
          'mini': 75,
          'medium': 240,
          'large': 550,
          'full': -1
        },
        'match': match,
        'url_template': 'https://img.ly/show/{0}/{1}'
      });
      return true;
    }
  },
  parseInstagram: function(cnt, callback) {
    var match;
    match = cnt.match(MediaServices.providers.Instagram);
    if (match) {
      MediaTypes.imageEntity(callback, {
        'sizes': {
          't': 150,
          'm': 306,
          'l': -1
        },
        'match': match,
        'url_template': 'https://instagram.com/p/{1}/media/?size={0}'
      });
      return true;
    }
  },
  parseTwitpic: function(cnt, callback) {
    var match;
    match = cnt.match(MediaServices.providers.Twitpic);
    if (match) {
      MediaTypes.imageEntity(callback, {
        'sizes': {
          'mini': 75,
          'thumb': 50,
          'large': -1
        },
        'match': match,
        'url_template': 'https://twitpic.com/show/{0}/{1}'
      });
      return true;
    }
  },
  parseYfrog: function(cnt, callback) {
    var match;
    match = cnt.match(MediaServices.providers.Yfrog);
    if (match) {
      MediaTypes.imageEntity(callback, {
        'sizes': {
          'small': 100,
          'medium': 640
        },
        'match': match,
        'url_template': 'https://yfrog.com/{1}:{0}'
      });
      return true;
    }
  },
  parseFlickr: function(cnt, callback, timeout) {
    var match;
    match = cnt.match(MediaServices.providers.Flickr);
    if (match) {
      MediaTypes.oembedImageEntitiy(callback, {
        'timeout': timeout,
        'sizes': {
          't': 75,
          'm': 150,
          'n': 240,
          'z': 550
        },
        'match': match,
        'oembed_template': 'https://www.flickr.com/services/oembed?url={0}&format=json',
        'custom_thumbnail_url': function(turl, best_size) {
          return turl.replace(/_[sqtmnzcbo]\.((?:jpg)|(?:gif)|(?:png))$/, "_" + best_size + '.$1');
        }
      });
      return true;
    }
  },
  parseDeviantArt: function(cnt, callback, timeout) {
    return MediaTypes.genericOemebed(cnt, callback, MediaServices.providers.DevaiantArt, 'https://backend.deviantart.com/oembed?url={0}&format=json', timeout);
  },
  parseHulu: function(cnt, callback, timeout) {
    return MediaTypes.genericOemebed(cnt, callback, MediaServices.providers.Hulu, 'http://www.hulu.com/api/oembed?url={0}&format=json', timeout);
  },
  parseJustin: function(cnt, callback, timeout) {
    return MediaTypes.genericOemebed(cnt, callback, MediaServices.providers.JustinTv, 'http://api.justin.tv/api/embed/from_url.json?url={0}', timeout);
  },
  parseScreenr: function(cnt, callback, timeout) {
    return MediaTypes.genericOemebed(cnt, callback, MediaServices.providers.Screenr, "http://www.screenr.com/api/oembed.json?url={0}", timeout);
  },
  parseRdio: function(cnt, callback, timeout) {
    return MediaTypes.genericOemebed(cnt, callback, MediaServices.providers.Rdio, "http://www.rdio.com/api/oembed/?url={0}&format=json", timeout);
  },
  parseSoundCloud: function(cnt, callback, timeout) {
    return MediaTypes.genericOemebed(cnt, callback, MediaServices.providers.Soundcloud, "https://soundcloud.com/oembed?url={0}&format=json", timeout);
  },
  parseSpotify: function(cnt, callback, timeout) {
    return MediaTypes.genericOemebed(cnt, callback, MediaServices.providers.Spotify, "https://embed.spotify.com/oembed/?url={0}&format=json", timeout);
  },
  parseTed: function(cnt, callback, timeout) {
    return MediaTypes.genericOemebed(cnt, callback, MediaServices.providers.Ted, "http://www.ted.com/talks/oembed.json?url={0}", timeout);
  },
  parseVimeo: function(cnt, callback, timeout) {
    var match;
    match = cnt.match(MediaServices.providers.Vimeo);
    if (match) {
      MediaTypes.oembedImageEntitiy(callback, {
        'timeout': timeout,
        'sizes': {
          '100': 100,
          '200': 200,
          '640': 640
        },
        'match': match,
        'oembed_template': "http://vimeo.com/api/oembed.json?url={0}",
        'custom_thumbnail_url': function(turl, best_size) {
          return turl.replace(/_\d+\.jpg$/i, "_" + best_size + ".jpg");
        }
      });
      return true;
    }
  },
  parseSlideshare: function(cnt, callback, timeout) {
    var match;
    match = cnt.match(MediaServices.providers.Slideshare);
    if (match) {
      MediaTypes.oembedImageEntitiy(callback, {
        'timeout': timeout,
        'sizes': {
          '3': 240,
          '4': 576
        },
        'match': match,
        'oembed_template': "http://www.slideshare.net/api/oembed/2?url={0}&format=json",
        'custom_thumbnail_url': function(turl, best_size, json) {
          turl = json.thumbnail;
          turl = turl.replace(/thumbnail(?:-\d)?\.jpg/, "thumbnail-" + best_size + ".jpg");
          if (turl.indexOf('http') !== 0) {
            turl = 'http:' + turl;
          }
          return turl;
        }
      });
      return true;
    }
  },
  parseYoutube: function(cnt, callback, timeout) {
    return MediaTypes.genericOemebed(cnt, callback, MediaServices.providers.Youtube, "http://www.youtube.com/oembed?url={0}&format=json", timeout);
  }
};

MediaTypes = {
  imageEntity: function(callback, opts) {
    return callback({
      'sizes': opts.sizes,
      'content_url': opts.match[0],
      'get_thumbnail_url': function(size) {
        var best_size, url, width;
        best_size = MediaParserUtils.getBestSize(opts.sizes, size);
        if (best_size) {
          width = opts.sizes[best_size];
          url = MediaParserUtils.format(opts.url_template, best_size, opts.match[1]);
          return [url, width, width];
        }
      }
    });
  },
  genericOemebed: function(cnt, callback, reg_exp, oembed_template, timeout) {
    var match;
    match = cnt.match(reg_exp);
    if (match) {
      MediaTypes.oembedImageEntitiy(callback, {
        'timeout': timeout,
        'match': match,
        'oembed_template': oembed_template
      });
      return true;
    }
  },
  oembedImageEntitiy: function(callback, opts) {
    var cb_error, cb_ok, content_url, req_url;
    content_url = opts.match[0];
    req_url = MediaParserUtils.format(opts.oembed_template, content_url);
    cb_ok = function(json) {
      var cb_head, result;
      result = {
        'get_thumbnail_url': function(size) {
          var best_size, custom_turl, theight, turl, twidth, width;
          if (opts.custom_thumbnail_url) {
            best_size = MediaParserUtils.getBestSize(opts.sizes, size);
            if (best_size) {
              width = opts.sizes[best_size];
              turl = json.thumbnail_url;
              custom_turl = opts.custom_thumbnail_url(turl, best_size, json);
              if (custom_turl) {
                return [custom_turl.replace('http:', 'https:'), width];
              }
            }
          }
          turl = json.thumbnail_url;
          twidth = json.thumbnail_width || 100;
          theight = json.thumbnail_height || twidth;
          if (turl) {
            return [turl.replace('http:', 'https:'), twidth, theight];
          }
        }
      };
      if (json.url) {
        result.content_url = json.url;
      }
      if (opts.sizes) {
        result.thumbnail_sizes = opts.sizes;
      }
      result.title = json.title || '';
      result.raw = json;
      if (result.content_url) {
        cb_head = function(head_res) {
          var content_type;
          if (head_res) {
            content_type = head_res.headers && head_res.headers['content-type'];
            if (content_type) {
              result.content_type = content_type;
            } else {
              result.content_type = 'application/octet-stream';
            }
          }
          return callback(result);
        };
        return MediaParser.http_service.headRequest(result.content_url, opts.timeout, cb_head);
      } else {
        return callback(result);
      }
    };
    cb_error = function(json) {
      return callback(null);
    };
    return MediaParser.http_service.oembedRequest(req_url, cb_ok, cb_error, content_url, opts.timeout);
  }
};

NodeHttpService = {
  oembedRequest: function(url, callback_ok, callback_error, content_url, timeout) {
    var args, request;
    request = require("request");
    timeout = timeout || 5000;
    args = {
      "url": url,
      "timeout": timeout
    };
    return request(args, function(error, response, body) {
      var e, json;
      if (error) {
        return callback_error(error);
      } else {
        try {
          json = JSON.parse(body);
          return callback_ok(json);
        } catch (_error) {
          e = _error;
          return callback_error('Unknown error happened');
        }
      }
    });
  },
  headRequest: function(url, timeout, callback) {
    var args, request;
    request = require("request");
    timeout = timeout || 5000;
    args = {
      "url": url,
      "timeout": timeout
    };
    return request.head(args, function(error, response, body) {
      return callback(response);
    });
  }
};

try {
  window.WebHttpService = new GWebHttpService();
} catch (_error) {
  e = _error;
  null;
}

try {
  exports.MediaParser = MediaParser;
} catch (_error) {
  e = _error;
  window.MediaParser = MediaParser;
}

try {
  exports.MediaServices = MediaServices;
} catch (_error) {
  e = _error;
  window.MediaServices = MediaServices;
}

try {
  exports.parse = MediaParser.parse;
} catch (_error) {
  e1 = _error;
  null;
}

try {
  exports.NodeHttpService = NodeHttpService;
} catch (_error) {
  e = _error;
  null;
}
